"""
Unified Data Tools for Data Analysis Agents
Combines data loading, discovery, and visualization capabilities following smolagents best practices.
"""

import streamlit as st
import pandas as pd
import os
from typing import Dict, Any, Optional, Union
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from smolagents import tool
from ..config.agent_config import VISUALIZATION_CONFIG


@tool
def load_and_explore_csv(filename: str, explore: bool = True) -> str:
    """
    Trouve un fichier CSV et indique √† l'agent comment le charger.
    
    Args:
        filename: Nom du fichier CSV √† trouver (ex: "titanic.csv")
        explore: Si True, sugg√®re aussi des commandes d'exploration (d√©faut: True)
    
    Returns:
        Instructions simples pour charger le fichier CSV trouv√©
    """
    try:
        # Recherche du fichier dans data/csv_temp
        search_dirs = ['data/csv_temp', './data/csv_temp']
        found_path = None
        
        for directory in search_dirs:
            if os.path.exists(directory):
                for root, dirs, files in os.walk(directory):
                    if filename in files:
                        found_path = os.path.join(root, filename)
                        break
                if found_path:
                    break
        
        if not found_path:
            # Lister les fichiers disponibles
            available_files = []
            for directory in search_dirs:
                if os.path.exists(directory):
                    for root, dirs, files in os.walk(directory):
                        csv_files = [f for f in files if f.endswith('.csv')]
                        available_files.extend(csv_files)
            
            if available_files:
                files_list = ', '.join(available_files)
                return f"‚ùå Fichier '{filename}' non trouv√©. Fichiers CSV disponibles: {files_list}"
            else:
                return "‚ùå Aucun fichier CSV trouv√© dans data/csv_temp/"
        
        # Cr√©er un nom de variable simple
        var_name = filename.replace('.csv', '').replace('-', '_').replace(' ', '_') + '_df'
        
        # Instructions simples pour l'agent
        instructions = f"‚úÖ Fichier trouv√© ! Pour charger '{filename}', utilise cette commande:\n\n"
        instructions += f"{var_name} = pd.read_csv(r'{found_path}')"
        
        if explore:
            instructions += f"\n\nPour explorer les donn√©es:\n"
            instructions += f"‚Ä¢ {var_name}.head() - Voir les premi√®res lignes\n"
            instructions += f"‚Ä¢ {var_name}.info() - Infos sur les colonnes\n"
            instructions += f"‚Ä¢ {var_name}.describe() - Statistiques descriptives\n"
            instructions += f"‚Ä¢ {var_name}.shape - Taille du dataset\n\n"
            instructions += f"üí° Conseil: Utilise display_figures() pour afficher tes graphiques et r√©ponds toujours en langage naturel !"
        
        return instructions
        
    except Exception as e:
        return f"‚ùå Erreur lors de la recherche de '{filename}': {str(e)}"


@tool
def display_figures(figures_dict: Dict[str, Any], figure_type: str = "auto") -> str:
    """
    Outil d'affichage unifi√© pour les graphiques matplotlib et plotly.
    
    BONNES PRATIQUES SMOLAGENTS INT√âGR√âES:
    - Gestion d'erreurs d√©taill√©e avec messages clairs
    - Nettoyage automatique de la m√©moire
    - Validation robuste des entr√©es
    
    Args:
        figures_dict: Dictionnaire associant les noms de graphiques aux objets graphiques.
                     Maximum 10 graphiques par appel pour √©viter les probl√®mes de m√©moire.
                     Utilise des noms descriptifs: {"analyse_ventes": fig1, "correlation": fig2}
                     
        figure_type: Type de graphiques √† afficher:
                    - "matplotlib": Pour les graphiques matplotlib/seaborn
                    - "plotly": Pour les graphiques plotly
                    - "auto": (d√©faut) D√©tecte automatiquement le type de graphique
    
    Returns:
        Message de statut d√©taill√© avec informations de d√©bogage selon les bonnes pratiques smolagents.
    """
    try:
        # Validation approfondie avec messages informatifs (bonne pratique smolagents)
        if not isinstance(figures_dict, dict):
            error_msg = f"‚ùå ERREUR TYPE: Attendu dict, re√ßu {type(figures_dict)}"
            return error_msg + "\\n\\nüîß Utilise un dictionnaire: display_figures({'nom': figure_object})"
        
        if not figures_dict:
            warning_msg = "‚ö†Ô∏è ATTENTION: Dictionnaire de graphiques vide"
            return warning_msg + "\\n\\nüîß Cr√©e d'abord tes graphiques avec matplotlib ou plotly"
        
        # V√©rifier la limite de graphiques
        max_figures = VISUALIZATION_CONFIG.get("max_figures_per_call", 10)
        if len(figures_dict) > max_figures:
            error_msg = f"‚ùå LIMITE D√âPASS√âE: {len(figures_dict)} graphiques (max {max_figures})"
            return error_msg + f"\\n\\nüîß Divise en plusieurs appels avec ‚â§{max_figures} graphiques"
        
        displayed_count = 0
        failed_figures = []
        
        for fig_name, fig_obj in figures_dict.items():
            try:
                # D√©terminer le type de graphique si auto
                current_figure_type = figure_type
                if current_figure_type == "auto":
                    if isinstance(fig_obj, go.Figure):
                        current_figure_type = "plotly"
                    else:
                        current_figure_type = "matplotlib"
                
                # G√©rer les graphiques matplotlib
                if current_figure_type == "matplotlib":
                    # G√©rer les objets axes en r√©cup√©rant leur figure
                    if hasattr(fig_obj, 'get_figure'):
                        fig_obj = fig_obj.get_figure()
                    
                    if hasattr(fig_obj, 'savefig'):
                        st.pyplot(fig_obj)
                        plt.close(fig_obj)  # Lib√©rer la m√©moire (bonne pratique)
                        displayed_count += 1
                    else:
                        failed_figures.append(f"{fig_name}: Objet matplotlib invalide")
                
                # G√©rer les graphiques plotly
                elif current_figure_type == "plotly":
                    if isinstance(fig_obj, go.Figure):
                        st.plotly_chart(fig_obj, use_container_width=True)
                        displayed_count += 1
                    else:
                        failed_figures.append(f"{fig_name}: Objet plotly invalide")
                
                else:
                    failed_figures.append(f"{fig_name}: Type invalide '{current_figure_type}'")
                    
            except Exception as e:
                failed_figures.append(f"{fig_name}: {str(e)}")
                st.error(f"Erreur graphique {fig_name}: {str(e)}")
        
        # Message de r√©sultat d√©taill√© (bonne pratique smolagents)
        result_parts = [f"üìä R√âSULTATS D'AFFICHAGE:"]
        result_parts.append(f"‚úÖ {displayed_count} graphique(s) affich√©(s) avec succ√®s")
        
        if failed_figures:
            result_parts.append(f"‚ùå {len(failed_figures)} graphique(s) ont √©chou√©:")
            for failure in failed_figures:
                result_parts.append(f"   ‚Ä¢ {failure}")
            result_parts.append("\\nüîß CONSEILS DE D√âBOGAGE:")
            result_parts.append("   ‚Ä¢ V√©rifies-tu que tes objets graphiques sont valides ?")
            result_parts.append("   ‚Ä¢ Pour matplotlib: utilise fig, ax = plt.subplots()")
            result_parts.append("   ‚Ä¢ Pour plotly: utilise fig = go.Figure()")
        
        if displayed_count > 0:
            result_parts.append(f"\\nüßπ M√©moire lib√©r√©e pour {displayed_count} graphique(s)")
        
        final_result = "\\n".join(result_parts)
        return final_result
        
    except Exception as e:
        error_msg = f"üí• ERREUR CRITIQUE: {str(e)}"
        return error_msg + "\\n\\nüîß Assure-toi de passer des objets graphiques valides dans un dictionnaire"


# ============ OUTILS D√âPR√âCI√âS - COMPATIBILIT√â ASCENDANTE ============
# Ces outils restent pour la compatibilit√© mais ne devraient plus √™tre utilis√©s

@tool  
def data_loader(file_context: str, mode: str = "auto") -> str:
    """
    [D√âPR√âCI√â] Outil legacy pour compatibilit√© ascendante.
    
    ‚ö†Ô∏è UTILISE PLUT√îT: load_and_explore_csv() qui suit les bonnes pratiques smolagents.
    
    Cet outil reste disponible uniquement pour compatibilit√© avec l'ancien code.
    Il redirige vers le nouvel outil unifi√© load_and_explore_csv.
    
    Args:
        file_context: Nom du fichier CSV √† charger ou contexte de recherche
        mode: Mode de fonctionnement (d√©faut: "auto")
    
    Returns:
        Code Python g√©n√©r√© pour charger ou d√©couvrir les fichiers CSV
    """
    # Rediriger vers le nouvel outil unifi√©
    if file_context.endswith('.csv'):
        return load_and_explore_csv(file_context, explore=True)
    else:
        # Mode d√©couverte - g√©n√©rer du code de d√©couverte
        return '''# üîç D√âCOUVERTE DES FICHIERS CSV DISPONIBLES
import os

print("üìÅ Recherche des fichiers CSV...")
found_files = []
search_dirs = ['data/csv_temp', './data/csv_temp']

for directory in search_dirs:
    if os.path.exists(directory):
        for root, dirs, files in os.walk(directory):
            csv_files = [f for f in files if f.endswith('.csv')]
            for csv_file in csv_files:
                found_files.append((csv_file, os.path.join(root, csv_file)))

if found_files:
    print("‚úÖ Fichiers CSV disponibles:")
    for i, (filename, filepath) in enumerate(found_files, 1):
        size = os.path.getsize(filepath) / 1024
        print(f"  {i}. {filename} ({size:.1f} KB)")
    print("\\nüöÄ Pour charger un fichier:")
    print("   ‚Ä¢ Utilise load_and_explore_csv('nom_fichier.csv')")
else:
    print("‚ùå Aucun fichier CSV trouv√© dans data/csv_temp/")'''


@tool
def get_dataframe(dataset_name: str) -> str:
    """
    [D√âPR√âCI√â] Outil legacy pour compatibilit√© ascendante.
    
    ‚ö†Ô∏è UTILISE PLUT√îT: load_and_explore_csv() qui g√®re tout automatiquement.
    
    Cet outil reste disponible uniquement pour compatibilit√© avec l'ancien code.
    
    Args:
        dataset_name: Nom du dataset √† r√©cup√©rer depuis la session Streamlit
    
    Returns:
        Code Python g√©n√©r√© pour acc√©der au dataset ou message d'erreur
    """
    # Code de compatibilit√© minimal
    return f'''# ‚ö†Ô∏è FONCTION D√âPR√âCI√âE - get_dataframe()
import streamlit as st

# V√©rifier si le dataset existe en session
df_key = 'dataframe_{dataset_name}'

if 'st' in globals() and hasattr(st, 'session_state') and df_key in st.session_state:
    {dataset_name}_df = st.session_state[df_key]
    print(f"‚úÖ Dataset '{dataset_name}' r√©cup√©r√© depuis la session")
    print(f"üìè Forme: {{{dataset_name}_df.shape[0]}} lignes √ó {{{dataset_name}_df.shape[1]}} colonnes")
    print(f"üéØ Variable disponible: {dataset_name}_df")
else:
    print(f"‚ùå Dataset '{dataset_name}' non trouv√© en session")
    print("üöÄ SOLUTION: Utilise load_and_explore_csv('fichier.csv') √† la place")
    print("   Cette m√©thode est plus fiable et suit les bonnes pratiques")'''


@tool
def load_csv_data(filename: str) -> str:
    """
    [D√âPR√âCI√â] Outil legacy pour compatibilit√© ascendante.
    
    ‚ö†Ô∏è UTILISE PLUT√îT: load_and_explore_csv() qui est plus complet et optimis√©.
    
    Cet outil reste disponible uniquement pour compatibilit√© avec l'ancien code.
    Il redirige vers le nouvel outil unifi√©.
    
    Args:
        filename: Nom du fichier CSV √† charger
    
    Returns:
        Code Python g√©n√©r√© pour charger le fichier CSV
    """
    # Rediriger vers le nouvel outil unifi√© (sans exploration par d√©faut pour compatibilit√©)
    return load_and_explore_csv(filename, explore=False) 