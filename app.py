import streamlit as st
import os
import tempfile
import shutil
import uuid
from smolagents import CodeAgent, ToolCallingAgent, DuckDuckGoSearchTool, VisitWebpageTool, OpenAIServerModel
from managed_agent.csv_analyzer_tool import CSVAnalyzerTool

def route_request(query, csv_args, search_agent, data_analyst):
    """
    Fonction de routage qui d√©l√®gue la requ√™te √† l'agent sp√©cialis√©.
    Si csv_args est fourni (indiquant la pr√©sence d'un fichier CSV), la requ√™te est d√©l√©gu√©e √† data_analyst.
    Sinon, la requ√™te est envoy√©e √† search_agent.
    """
    if csv_args is not None:
        # D√©l√©gation √† l'agent d'analyse de donn√©es pour traitement CSV
        return data_analyst.run("Analyse du fichier CSV: " + query, additional_args=csv_args)
    else:
        # D√©l√©gation √† l'agent de recherche pour traiter la requ√™te g√©n√©rale
        return search_agent.run(query)

def cleanup_resources(figures_dir):
    """
    Nettoie les ressources utilis√©es par les agents.
    
    Args:
        figures_dir: Chemin vers le dossier contenant les figures g√©n√©r√©es
    """
    # Nettoyage du dossier de figures s'il existe
    if os.path.exists(figures_dir):
        try:
            shutil.rmtree(figures_dir)
            os.makedirs(figures_dir, exist_ok=True)
        except Exception as e:
            st.warning(f"Impossible de nettoyer le dossier des figures: {e}")
    else:
        os.makedirs(figures_dir, exist_ok=True)

def main():
    st.title("Agent Web avec Streamlit")
    st.write("Entrez votre cl√© API OpenAI et votre requ√™te pour interroger l'agent.")

    # Initialisation de la session si n√©cessaire
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    
    # Dossier sp√©cifique pour les figures de cette session
    figures_dir = os.path.join('./figures', st.session_state.session_id)
    
    # Saisie de la cl√© API (en mode mot de passe)
    api_key = st.text_input("Cl√© API OpenAI", type="password")
    
    # Upload d'un fichier CSV (optionnel)
    uploaded_file = st.file_uploader("D√©poser un fichier CSV (optionnel)", type=['csv'])
    
    # Option pour limiter l'utilisation de la m√©moire
    use_memory_limit = st.checkbox("Limiter l'utilisation de la m√©moire (recommand√© pour les grands fichiers)", value=True)
    chunk_size = 100000 if use_memory_limit else None
    
    # Saisie de la requ√™te utilisateur
    user_query = st.text_input("Requ√™te √† envoyer √† l'agent")
    
    if st.button("Ex√©cuter"):
        # V√©rification des entr√©es
        if not api_key:
            st.error("Veuillez entrer une cl√© API valide.")
            return
        if not user_query:
            st.error("Veuillez entrer une requ√™te.")
            return
        
        # Nettoyer les ressources pr√©c√©dentes
        cleanup_resources(figures_dir)
        
        # D√©finition de la cl√© API dans l'environnement
        os.environ["OPENAI_API_KEY"] = api_key
        
        # Cr√©ation du mod√®le OpenAIServerModel
        model = OpenAIServerModel(
            model_id="gpt-4o",
            api_base="https://api.openai.com/v1",
            api_key=api_key,
        )
        
        # Cr√©ation de l'agent de recherche (search_agent)
        search_agent = ToolCallingAgent(
            tools=[DuckDuckGoSearchTool(), VisitWebpageTool()],
            model=model,
            name="search_agent",
            description="Effectue des recherches sur le web en utilisant DuckDuckGo et visite des pages web."
        )
        
        # Cr√©ation de l'agent d'analyse des donn√©es (data_analyst)
        authorized_imports = [
            "pandas", "numpy", "matplotlib", "matplotlib.pyplot", 
            "seaborn", "io", "base64", "tempfile", "os"
        ]
        data_analyst = CodeAgent(
            tools=[CSVAnalyzerTool()],
            model=model,
            additional_authorized_imports=authorized_imports,
            name="data_analyst",
            description="Analyse les fichiers CSV et g√©n√®re des visualisations √† partir des donn√©es."
        )
        
        # Liste des agents g√©r√©s
        managed_agents = [search_agent, data_analyst]
        
        # Pr√©paration des param√®tres li√©s au fichier CSV s'il y a lieu
        csv_args = None
        if uploaded_file is not None:
            try:
                # Lire le contenu du fichier upload√©
                file_content = uploaded_file.getvalue().decode("utf-8")
                # D√©terminer le s√©parateur via un heuristique simple
                first_line = file_content.split('\n')[0]
                separator = ',' if ',' in first_line else ';'
                # Sauvegarder le contenu dans un fichier temporaire
                temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.csv')
                csv_file_path = temp_file.name
                temp_file.write(file_content.encode("utf-8"))
                temp_file.close()
                
                # Estimer la taille du fichier pour recommandations de m√©moire
                file_size_mb = len(file_content) / (1024 * 1024)
                memory_warning = ""
                if file_size_mb > 10 and not use_memory_limit:
                    memory_warning = "‚ö†Ô∏è Le fichier est relativement volumineux. L'option de limitation de m√©moire est recommand√©e."
                
                # Pr√©parer les notes pour le data_analyst
                data_analyst_notes = f"""
# Guide d'analyse de donn√©es
- Chemin: {csv_file_path}
- S√©parateur: '{separator}'
- Dossier pour figures: '{figures_dir}'
- Taille du fichier: {file_size_mb:.2f} MB

# √âtapes recommand√©es :
1. Validation du fichier CSV via csv_analyzer.
2. Exploration des donn√©es avec df.info(), df.describe() et v√©rification des valeurs manquantes.
3. Cr√©ation de visualisations (histplots, boxplots, scatter plots) avec seaborn et matplotlib.
4. Enregistrer toutes les figures dans le dossier '{figures_dir}'.
                """
                csv_args = {
                    "source_file": csv_file_path, 
                    "separator": separator, 
                    "additional_notes": data_analyst_notes,
                    "figures_dir": figures_dir,
                    "chunk_size": chunk_size
                }
                
                info_message = f"Fichier CSV d√©tect√© avec s√©parateur '{separator}'. L'agent Data Analyst sera utilis√©."
                if memory_warning:
                    info_message += f" {memory_warning}"
                st.info(info_message)
            
            except Exception as e:
                st.error(f"Erreur lors du traitement du fichier CSV: {str(e)}")
                return
        else:
            st.info("Aucun fichier CSV d√©tect√©. L'agent de recherche sera utilis√©.")
        
        # Utilisation de la fonction de routage pour d√©l√©guer la requ√™te
        with st.spinner("L'agent traite votre requ√™te..."):
            try:
                result = route_request(user_query, csv_args, search_agent, data_analyst)
            except Exception as e:
                st.error(f"Erreur lors du traitement de la requ√™te: {str(e)}")
                return
        
        st.subheader("R√©sultat de l'agent")
        st.markdown(result, unsafe_allow_html=True)
        
        # Afficher les figures g√©n√©r√©es dans le dossier des figures, si pr√©sentes
        if os.path.exists(figures_dir) and os.listdir(figures_dir):
            st.subheader("Figures g√©n√©r√©es")
            for fig_file in os.listdir(figures_dir):
                if fig_file.lower().endswith(('.png', '.jpg', '.jpeg')):
                    st.image(os.path.join(figures_dir, fig_file), caption=fig_file)
        
        # Nettoyage du fichier temporaire si upload√©
        if uploaded_file is not None and csv_args is not None:
            try:
                os.unlink(csv_args["source_file"])
            except Exception as e:
                st.error(f"Erreur lors de la suppression du fichier temporaire: {e}")
        
        # Conseil compl√©mentaire pour l'analyse de donn√©es
        if csv_args is not None:
            st.info("üí° Conseil: Vous pouvez demander √† l'agent d'effectuer des analyses plus sp√©cifiques, comme des corr√©lations ou des statistiques d√©taill√©es sur vos donn√©es CSV.")

if __name__ == "__main__":
    main()
