"""
Affichage style NotebookLM pour les r√©ponses RAG.
Interface unifi√©e qui lie la r√©ponse de l'agent aux sources avec des citations num√©rot√©es.
"""

import streamlit as st
import json
import re
from typing import Dict, List, Any, Optional


def display_rag_results(results_json: str, query: str = "") -> None:
    """
    Affichage style NotebookLM des r√©sultats de recherche PDF.
    
    Args:
        results_json: JSON string contenant les r√©sultats structur√©s
        query: Requ√™te originale de l'utilisateur
    """
    try:
        results = json.loads(results_json)
    except json.JSONDecodeError:
        st.error("‚ùå Erreur de parsing des r√©sultats")
        return
    
    if not results.get("success"):
        _display_error_simple(results)
        return
    
    _display_notebooklm_style(results, query)


def display_notebooklm_response(agent_response: str, sources_data: Dict, query: str = "") -> None:
    """
    Affichage principal style NotebookLM avec r√©ponse int√©gr√©e et sources num√©rot√©es.
    
    Args:
        agent_response: R√©ponse de l'agent avec citations [1], [2], etc.
        sources_data: Donn√©es des sources parsed du JSON
        query: Requ√™te originale
    """
    st.markdown("---")
    
    # 1. R√©ponse de l'agent avec citations int√©gr√©es
    st.markdown("### üí¨ R√©ponse")
    
    # Parse les citations dans la r√©ponse et les rend cliquables
    enhanced_response = _enhance_citations_in_response(agent_response, sources_data)
    st.markdown(enhanced_response, unsafe_allow_html=True)
    
    # 2. Sources num√©rot√©es correspondantes
    st.markdown("### üìö Sources")
    _display_numbered_sources(sources_data, query)
    
    st.markdown("---")


def _enhance_citations_in_response(response: str, sources_data: Dict) -> str:
    """
    Am√©liore les citations [1], [2] dans la r√©ponse pour les rendre visuelles.
    """
    if not response:
        return "Aucune r√©ponse disponible."
    
    # Trouve toutes les citations [1], [2], etc.
    citation_pattern = r'\[(\d+)\]'
    citations = re.findall(citation_pattern, response)
    
    # Remplace chaque citation par une version styl√©e
    enhanced_response = response
    for citation_num in set(citations):
        old_citation = f"[{citation_num}]"
        new_citation = f'<span style="background-color: #e3f2fd; color: #1976d2; padding: 2px 6px; border-radius: 12px; font-size: 0.85em; font-weight: bold;">[{citation_num}]</span>'
        enhanced_response = enhanced_response.replace(old_citation, new_citation)
    
    return enhanced_response


def _display_numbered_sources(sources_data: Dict, query: str) -> None:
    """
    Affiche les sources num√©rot√©es de fa√ßon claire et concise.
    """
    search_results = sources_data.get("results", [])
    
    if not search_results:
        st.info("üìñ Aucune source disponible")
        return
    
    # Affiche chaque source avec son num√©ro
    for i, result in enumerate(search_results[:5], 1):  # Limite √† 5 sources
        _display_single_numbered_source(result, i)


def _display_single_numbered_source(result: Dict[str, Any], index: int) -> None:
    """
    Affiche une source num√©rot√©e de fa√ßon concise style NotebookLM.
    """
    metadata = result.get("metadata", {})
    content = result.get("content", "")
    
    # Informations essentielles
    source = metadata.get("source", "Document inconnu")
    page = metadata.get("page", "?")
    
    # Nettoyage du nom de fichier
    if source.endswith('.pdf'):
        source = source[:-4]
    
    # Extrait concis (1-2 phrases max)
    excerpt = _extract_key_sentences(content, max_sentences=1)
    
    # Style NotebookLM : num√©ro + source + extrait
    with st.container():
        # Citation num√©rot√©e avec style
        col1, col2 = st.columns([1, 15])
        
        with col1:
            st.markdown(f"**[{index}]**")
        
        with col2:
            # Nom du document et page
            st.markdown(f"**{source}**, page {page}")
            
            # Extrait avec style citation
            st.markdown(f'*"{excerpt}"*')
            
            # Bouton discret pour voir plus
            if len(content) > len(excerpt) + 50:
                with st.expander("üëÅÔ∏è Voir le passage complet", expanded=False):
                    st.text_area(
                        "Contexte complet",
                        value=content,
                        height=200,
                        key=f"source_content_{index}",
                        label_visibility="collapsed"
                    )
        
        st.markdown("")  # Espacement


def _display_notebooklm_style(results: Dict[str, Any], query: str) -> None:
    """
    Affichage style NotebookLM pour les r√©sultats existants (fallback).
    """
    search_results = results.get("results", [])
    
    if not search_results:
        st.info("üìñ Aucune source trouv√©e")
        return
    
    # En-t√™te simple
    st.markdown("### üìö Sources trouv√©es")
    if query:
        st.markdown(f"*Pour la recherche : {query}*")
    st.markdown("")
    
    # Affichage des sources num√©rot√©es
    for i, result in enumerate(search_results[:5], 1):
        _display_single_numbered_source(result, i)


def _display_error_simple(results: Dict[str, Any]) -> None:
    """Affichage simplifi√© des erreurs."""
    error_message = results.get("error", "Erreur inconnue")
    st.error(f"**Recherche √©chou√©e:** {error_message}")
    
    if "no_context" in results.get("error_type", ""):
        st.info("üí° **Astuce:** Chargez d'abord un fichier PDF via la barre lat√©rale")


def _extract_key_sentences(text: str, max_sentences: int = 1) -> str:
    """
    Extrait les phrases les plus importantes du texte.
    Optimis√© pour les citations courtes style NotebookLM.
    """
    if not text:
        return "Contenu non disponible"
    
    # Divise en phrases
    sentences = []
    for sep in ['. ', '! ', '? ']:
        if sep in text:
            sentences = text.split(sep)
            break
    
    if not sentences:
        # Si pas de s√©parateurs, prend les premiers 150 caract√®res
        return text[:150] + "..." if len(text) > 150 else text
    
    # Prend les premi√®res phrases significatives
    key_sentences = []
    total_length = 0
    
    for sentence in sentences[:max_sentences]:
        sentence = sentence.strip()
        if sentence and len(sentence) > 10:  # √âvite les phrases trop courtes
            key_sentences.append(sentence)
            total_length += len(sentence)
            
            # Limite la longueur totale pour rester lisible
            if total_length > 200:
                break
    
    if not key_sentences:
        # Fallback: premiers mots
        words = text.split()[:20]
        return ' '.join(words) + "..." if len(words) == 20 else ' '.join(words)
    
    result = '. '.join(key_sentences)
    
    # Ajoute un point final si n√©cessaire
    if result and not result.endswith(('.', '!', '?')):
        result += '.'
    
    return result


def display_structured_rag_response(response: str, query: str = "") -> bool:
    """
    D√©tecte et affiche les r√©ponses RAG structur√©es style NotebookLM.
    
    Args:
        response: R√©ponse de l'agent (JSON ou texte)
        query: Requ√™te originale
        
    Returns:
        True si affich√© comme r√©sultat structur√©, False sinon
    """
    # D√©tecte les citations dans la r√©ponse (style NotebookLM)
    citation_pattern = r'\[(\d+)\]'
    has_citations = bool(re.search(citation_pattern, response))
    
    # D√©tecte le JSON dans la r√©ponse
    try:
        # Cherche du JSON dans un bloc de code
        if "```json" in response:
            start = response.find("```json") + 7
            end = response.find("```", start)
            json_part = response[start:end].strip()
            
            # Parse les sources
            sources_data = json.loads(json_part)
            
            if isinstance(sources_data, dict) and sources_data.get("success") and sources_data.get("results"):
                if has_citations:
                    # Style NotebookLM complet avec citations int√©gr√©es
                    # Extrait la partie texte de la r√©ponse (avant le JSON)
                    text_part = response[:response.find("```json")].strip()
                    display_notebooklm_response(text_part, sources_data, query)
                else:
                    # Fallback: affichage standard des sources
                    display_rag_results(json_part, query)
                return True
                
        elif response.strip().startswith("{") and response.strip().endswith("}"):
            # Toute la r√©ponse est en JSON
            sources_data = json.loads(response.strip())
            if isinstance(sources_data, dict) and ("success" in sources_data or "results" in sources_data):
                display_rag_results(response.strip(), query)
                return True
            
    except (json.JSONDecodeError, KeyError, ValueError):
        pass
    
    return False 